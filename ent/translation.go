// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"ent/ent/translation"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Translation is the model entity for the Translation schema.
type Translation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Choices holds the value of the "choices" field.
	Choices []map[string]interface{} `json:"choices,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// LanguagePair holds the value of the "language_pair" field.
	LanguagePair string `json:"language_pair,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TranslationQuery when eager-loading is set.
	Edges        TranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TranslationEdges holds the relations/edges for other nodes in the graph.
type TranslationEdges struct {
	// TranscriptionStats holds the value of the transcription_stats edge.
	TranscriptionStats []*TranscriptionStats `json:"transcription_stats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TranscriptionStatsOrErr returns the TranscriptionStats value or an error if the edge
// was not loaded in eager-loading.
func (e TranslationEdges) TranscriptionStatsOrErr() ([]*TranscriptionStats, error) {
	if e.loadedTypes[0] {
		return e.TranscriptionStats, nil
	}
	return nil, &NotLoadedError{edge: "transcription_stats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Translation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case translation.FieldChoices:
			values[i] = new([]byte)
		case translation.FieldID:
			values[i] = new(sql.NullInt64)
		case translation.FieldContent, translation.FieldExternalID, translation.FieldLanguagePair, translation.FieldOwnerID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Translation fields.
func (_m *Translation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case translation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case translation.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case translation.FieldChoices:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field choices", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Choices); err != nil {
					return fmt.Errorf("unmarshal field choices: %w", err)
				}
			}
		case translation.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				_m.ExternalID = value.String
			}
		case translation.FieldLanguagePair:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_pair", values[i])
			} else if value.Valid {
				_m.LanguagePair = value.String
			}
		case translation.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Translation.
// This includes values selected through modifiers, order, etc.
func (_m *Translation) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTranscriptionStats queries the "transcription_stats" edge of the Translation entity.
func (_m *Translation) QueryTranscriptionStats() *TranscriptionStatsQuery {
	return NewTranslationClient(_m.config).QueryTranscriptionStats(_m)
}

// Update returns a builder for updating this Translation.
// Note that you need to call Translation.Unwrap() before calling this method if this Translation
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Translation) Update() *TranslationUpdateOne {
	return NewTranslationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Translation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Translation) Unwrap() *Translation {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Translation is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Translation) String() string {
	var builder strings.Builder
	builder.WriteString("Translation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("choices=")
	builder.WriteString(fmt.Sprintf("%v", _m.Choices))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(_m.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("language_pair=")
	builder.WriteString(_m.LanguagePair)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteByte(')')
	return builder.String()
}

// Translations is a parsable slice of Translation.
type Translations []*Translation
