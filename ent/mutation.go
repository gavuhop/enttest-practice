// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/languagedetection"
	"ent/ent/predicate"
	"ent/ent/transcriptionstats"
	"ent/ent/translation"
	"ent/ent/user"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLanguageDetection  = "LanguageDetection"
	TypeTranscriptionStats = "TranscriptionStats"
	TypeTranslation        = "Translation"
	TypeUser               = "User"
)

// LanguageDetectionMutation represents an operation that mutates the LanguageDetection nodes in the graph.
type LanguageDetectionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	query              *string
	detected_languages *map[string]interface{}
	duration           *int64
	addduration        *int64
	model_name         *string
	input_token        *int
	addinput_token     *int
	output_token       *int
	addoutput_token    *int
	cached_token       *int
	addcached_token    *int
	owner_id           *string
	cost               *float64
	addcost            *float64
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*LanguageDetection, error)
	predicates         []predicate.LanguageDetection
}

var _ ent.Mutation = (*LanguageDetectionMutation)(nil)

// languagedetectionOption allows management of the mutation configuration using functional options.
type languagedetectionOption func(*LanguageDetectionMutation)

// newLanguageDetectionMutation creates new mutation for the LanguageDetection entity.
func newLanguageDetectionMutation(c config, op Op, opts ...languagedetectionOption) *LanguageDetectionMutation {
	m := &LanguageDetectionMutation{
		config:        c,
		op:            op,
		typ:           TypeLanguageDetection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLanguageDetectionID sets the ID field of the mutation.
func withLanguageDetectionID(id int) languagedetectionOption {
	return func(m *LanguageDetectionMutation) {
		var (
			err   error
			once  sync.Once
			value *LanguageDetection
		)
		m.oldValue = func(ctx context.Context) (*LanguageDetection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LanguageDetection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLanguageDetection sets the old LanguageDetection of the mutation.
func withLanguageDetection(node *LanguageDetection) languagedetectionOption {
	return func(m *LanguageDetectionMutation) {
		m.oldValue = func(context.Context) (*LanguageDetection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LanguageDetectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LanguageDetectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LanguageDetectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LanguageDetectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LanguageDetection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuery sets the "query" field.
func (m *LanguageDetectionMutation) SetQuery(s string) {
	m.query = &s
}

// Query returns the value of the "query" field in the mutation.
func (m *LanguageDetectionMutation) Query() (r string, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ResetQuery resets all changes to the "query" field.
func (m *LanguageDetectionMutation) ResetQuery() {
	m.query = nil
}

// SetDetectedLanguages sets the "detected_languages" field.
func (m *LanguageDetectionMutation) SetDetectedLanguages(value map[string]interface{}) {
	m.detected_languages = &value
}

// DetectedLanguages returns the value of the "detected_languages" field in the mutation.
func (m *LanguageDetectionMutation) DetectedLanguages() (r map[string]interface{}, exists bool) {
	v := m.detected_languages
	if v == nil {
		return
	}
	return *v, true
}

// OldDetectedLanguages returns the old "detected_languages" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldDetectedLanguages(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetectedLanguages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetectedLanguages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetectedLanguages: %w", err)
	}
	return oldValue.DetectedLanguages, nil
}

// ResetDetectedLanguages resets all changes to the "detected_languages" field.
func (m *LanguageDetectionMutation) ResetDetectedLanguages() {
	m.detected_languages = nil
}

// SetDuration sets the "duration" field.
func (m *LanguageDetectionMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *LanguageDetectionMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *LanguageDetectionMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *LanguageDetectionMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *LanguageDetectionMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetModelName sets the "model_name" field.
func (m *LanguageDetectionMutation) SetModelName(s string) {
	m.model_name = &s
}

// ModelName returns the value of the "model_name" field in the mutation.
func (m *LanguageDetectionMutation) ModelName() (r string, exists bool) {
	v := m.model_name
	if v == nil {
		return
	}
	return *v, true
}

// OldModelName returns the old "model_name" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldModelName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelName: %w", err)
	}
	return oldValue.ModelName, nil
}

// ResetModelName resets all changes to the "model_name" field.
func (m *LanguageDetectionMutation) ResetModelName() {
	m.model_name = nil
}

// SetInputToken sets the "input_token" field.
func (m *LanguageDetectionMutation) SetInputToken(i int) {
	m.input_token = &i
	m.addinput_token = nil
}

// InputToken returns the value of the "input_token" field in the mutation.
func (m *LanguageDetectionMutation) InputToken() (r int, exists bool) {
	v := m.input_token
	if v == nil {
		return
	}
	return *v, true
}

// OldInputToken returns the old "input_token" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldInputToken(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInputToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInputToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInputToken: %w", err)
	}
	return oldValue.InputToken, nil
}

// AddInputToken adds i to the "input_token" field.
func (m *LanguageDetectionMutation) AddInputToken(i int) {
	if m.addinput_token != nil {
		*m.addinput_token += i
	} else {
		m.addinput_token = &i
	}
}

// AddedInputToken returns the value that was added to the "input_token" field in this mutation.
func (m *LanguageDetectionMutation) AddedInputToken() (r int, exists bool) {
	v := m.addinput_token
	if v == nil {
		return
	}
	return *v, true
}

// ResetInputToken resets all changes to the "input_token" field.
func (m *LanguageDetectionMutation) ResetInputToken() {
	m.input_token = nil
	m.addinput_token = nil
}

// SetOutputToken sets the "output_token" field.
func (m *LanguageDetectionMutation) SetOutputToken(i int) {
	m.output_token = &i
	m.addoutput_token = nil
}

// OutputToken returns the value of the "output_token" field in the mutation.
func (m *LanguageDetectionMutation) OutputToken() (r int, exists bool) {
	v := m.output_token
	if v == nil {
		return
	}
	return *v, true
}

// OldOutputToken returns the old "output_token" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldOutputToken(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutputToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutputToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutputToken: %w", err)
	}
	return oldValue.OutputToken, nil
}

// AddOutputToken adds i to the "output_token" field.
func (m *LanguageDetectionMutation) AddOutputToken(i int) {
	if m.addoutput_token != nil {
		*m.addoutput_token += i
	} else {
		m.addoutput_token = &i
	}
}

// AddedOutputToken returns the value that was added to the "output_token" field in this mutation.
func (m *LanguageDetectionMutation) AddedOutputToken() (r int, exists bool) {
	v := m.addoutput_token
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutputToken resets all changes to the "output_token" field.
func (m *LanguageDetectionMutation) ResetOutputToken() {
	m.output_token = nil
	m.addoutput_token = nil
}

// SetCachedToken sets the "cached_token" field.
func (m *LanguageDetectionMutation) SetCachedToken(i int) {
	m.cached_token = &i
	m.addcached_token = nil
}

// CachedToken returns the value of the "cached_token" field in the mutation.
func (m *LanguageDetectionMutation) CachedToken() (r int, exists bool) {
	v := m.cached_token
	if v == nil {
		return
	}
	return *v, true
}

// OldCachedToken returns the old "cached_token" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldCachedToken(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCachedToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCachedToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCachedToken: %w", err)
	}
	return oldValue.CachedToken, nil
}

// AddCachedToken adds i to the "cached_token" field.
func (m *LanguageDetectionMutation) AddCachedToken(i int) {
	if m.addcached_token != nil {
		*m.addcached_token += i
	} else {
		m.addcached_token = &i
	}
}

// AddedCachedToken returns the value that was added to the "cached_token" field in this mutation.
func (m *LanguageDetectionMutation) AddedCachedToken() (r int, exists bool) {
	v := m.addcached_token
	if v == nil {
		return
	}
	return *v, true
}

// ResetCachedToken resets all changes to the "cached_token" field.
func (m *LanguageDetectionMutation) ResetCachedToken() {
	m.cached_token = nil
	m.addcached_token = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *LanguageDetectionMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *LanguageDetectionMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *LanguageDetectionMutation) ResetOwnerID() {
	m.owner_id = nil
}

// SetCost sets the "cost" field.
func (m *LanguageDetectionMutation) SetCost(f float64) {
	m.cost = &f
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *LanguageDetectionMutation) Cost() (r float64, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the LanguageDetection entity.
// If the LanguageDetection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageDetectionMutation) OldCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds f to the "cost" field.
func (m *LanguageDetectionMutation) AddCost(f float64) {
	if m.addcost != nil {
		*m.addcost += f
	} else {
		m.addcost = &f
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *LanguageDetectionMutation) AddedCost() (r float64, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *LanguageDetectionMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// Where appends a list predicates to the LanguageDetectionMutation builder.
func (m *LanguageDetectionMutation) Where(ps ...predicate.LanguageDetection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LanguageDetectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LanguageDetectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LanguageDetection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LanguageDetectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LanguageDetectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LanguageDetection).
func (m *LanguageDetectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LanguageDetectionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.query != nil {
		fields = append(fields, languagedetection.FieldQuery)
	}
	if m.detected_languages != nil {
		fields = append(fields, languagedetection.FieldDetectedLanguages)
	}
	if m.duration != nil {
		fields = append(fields, languagedetection.FieldDuration)
	}
	if m.model_name != nil {
		fields = append(fields, languagedetection.FieldModelName)
	}
	if m.input_token != nil {
		fields = append(fields, languagedetection.FieldInputToken)
	}
	if m.output_token != nil {
		fields = append(fields, languagedetection.FieldOutputToken)
	}
	if m.cached_token != nil {
		fields = append(fields, languagedetection.FieldCachedToken)
	}
	if m.owner_id != nil {
		fields = append(fields, languagedetection.FieldOwnerID)
	}
	if m.cost != nil {
		fields = append(fields, languagedetection.FieldCost)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LanguageDetectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case languagedetection.FieldQuery:
		return m.Query()
	case languagedetection.FieldDetectedLanguages:
		return m.DetectedLanguages()
	case languagedetection.FieldDuration:
		return m.Duration()
	case languagedetection.FieldModelName:
		return m.ModelName()
	case languagedetection.FieldInputToken:
		return m.InputToken()
	case languagedetection.FieldOutputToken:
		return m.OutputToken()
	case languagedetection.FieldCachedToken:
		return m.CachedToken()
	case languagedetection.FieldOwnerID:
		return m.OwnerID()
	case languagedetection.FieldCost:
		return m.Cost()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LanguageDetectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case languagedetection.FieldQuery:
		return m.OldQuery(ctx)
	case languagedetection.FieldDetectedLanguages:
		return m.OldDetectedLanguages(ctx)
	case languagedetection.FieldDuration:
		return m.OldDuration(ctx)
	case languagedetection.FieldModelName:
		return m.OldModelName(ctx)
	case languagedetection.FieldInputToken:
		return m.OldInputToken(ctx)
	case languagedetection.FieldOutputToken:
		return m.OldOutputToken(ctx)
	case languagedetection.FieldCachedToken:
		return m.OldCachedToken(ctx)
	case languagedetection.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case languagedetection.FieldCost:
		return m.OldCost(ctx)
	}
	return nil, fmt.Errorf("unknown LanguageDetection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageDetectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case languagedetection.FieldQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case languagedetection.FieldDetectedLanguages:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetectedLanguages(v)
		return nil
	case languagedetection.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case languagedetection.FieldModelName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelName(v)
		return nil
	case languagedetection.FieldInputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInputToken(v)
		return nil
	case languagedetection.FieldOutputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutputToken(v)
		return nil
	case languagedetection.FieldCachedToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCachedToken(v)
		return nil
	case languagedetection.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case languagedetection.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	}
	return fmt.Errorf("unknown LanguageDetection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LanguageDetectionMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, languagedetection.FieldDuration)
	}
	if m.addinput_token != nil {
		fields = append(fields, languagedetection.FieldInputToken)
	}
	if m.addoutput_token != nil {
		fields = append(fields, languagedetection.FieldOutputToken)
	}
	if m.addcached_token != nil {
		fields = append(fields, languagedetection.FieldCachedToken)
	}
	if m.addcost != nil {
		fields = append(fields, languagedetection.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LanguageDetectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case languagedetection.FieldDuration:
		return m.AddedDuration()
	case languagedetection.FieldInputToken:
		return m.AddedInputToken()
	case languagedetection.FieldOutputToken:
		return m.AddedOutputToken()
	case languagedetection.FieldCachedToken:
		return m.AddedCachedToken()
	case languagedetection.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageDetectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case languagedetection.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case languagedetection.FieldInputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInputToken(v)
		return nil
	case languagedetection.FieldOutputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutputToken(v)
		return nil
	case languagedetection.FieldCachedToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCachedToken(v)
		return nil
	case languagedetection.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown LanguageDetection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LanguageDetectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LanguageDetectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LanguageDetectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LanguageDetection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LanguageDetectionMutation) ResetField(name string) error {
	switch name {
	case languagedetection.FieldQuery:
		m.ResetQuery()
		return nil
	case languagedetection.FieldDetectedLanguages:
		m.ResetDetectedLanguages()
		return nil
	case languagedetection.FieldDuration:
		m.ResetDuration()
		return nil
	case languagedetection.FieldModelName:
		m.ResetModelName()
		return nil
	case languagedetection.FieldInputToken:
		m.ResetInputToken()
		return nil
	case languagedetection.FieldOutputToken:
		m.ResetOutputToken()
		return nil
	case languagedetection.FieldCachedToken:
		m.ResetCachedToken()
		return nil
	case languagedetection.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case languagedetection.FieldCost:
		m.ResetCost()
		return nil
	}
	return fmt.Errorf("unknown LanguageDetection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LanguageDetectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LanguageDetectionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LanguageDetectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LanguageDetectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LanguageDetectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LanguageDetectionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LanguageDetectionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LanguageDetection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LanguageDetectionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LanguageDetection edge %s", name)
}

// TranscriptionStatsMutation represents an operation that mutates the TranscriptionStats nodes in the graph.
type TranscriptionStatsMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	duration           *int64
	addduration        *int64
	input_token        *int
	addinput_token     *int
	output_token       *int
	addoutput_token    *int
	model_name         *string
	cost               *float64
	addcost            *float64
	owner_id           *string
	clearedFields      map[string]struct{}
	translation        *int
	clearedtranslation bool
	done               bool
	oldValue           func(context.Context) (*TranscriptionStats, error)
	predicates         []predicate.TranscriptionStats
}

var _ ent.Mutation = (*TranscriptionStatsMutation)(nil)

// transcriptionstatsOption allows management of the mutation configuration using functional options.
type transcriptionstatsOption func(*TranscriptionStatsMutation)

// newTranscriptionStatsMutation creates new mutation for the TranscriptionStats entity.
func newTranscriptionStatsMutation(c config, op Op, opts ...transcriptionstatsOption) *TranscriptionStatsMutation {
	m := &TranscriptionStatsMutation{
		config:        c,
		op:            op,
		typ:           TypeTranscriptionStats,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranscriptionStatsID sets the ID field of the mutation.
func withTranscriptionStatsID(id int) transcriptionstatsOption {
	return func(m *TranscriptionStatsMutation) {
		var (
			err   error
			once  sync.Once
			value *TranscriptionStats
		)
		m.oldValue = func(ctx context.Context) (*TranscriptionStats, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TranscriptionStats.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTranscriptionStats sets the old TranscriptionStats of the mutation.
func withTranscriptionStats(node *TranscriptionStats) transcriptionstatsOption {
	return func(m *TranscriptionStatsMutation) {
		m.oldValue = func(context.Context) (*TranscriptionStats, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranscriptionStatsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranscriptionStatsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranscriptionStatsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranscriptionStatsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TranscriptionStats.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDuration sets the "duration" field.
func (m *TranscriptionStatsMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *TranscriptionStatsMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *TranscriptionStatsMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *TranscriptionStatsMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *TranscriptionStatsMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetInputToken sets the "input_token" field.
func (m *TranscriptionStatsMutation) SetInputToken(i int) {
	m.input_token = &i
	m.addinput_token = nil
}

// InputToken returns the value of the "input_token" field in the mutation.
func (m *TranscriptionStatsMutation) InputToken() (r int, exists bool) {
	v := m.input_token
	if v == nil {
		return
	}
	return *v, true
}

// OldInputToken returns the old "input_token" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldInputToken(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInputToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInputToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInputToken: %w", err)
	}
	return oldValue.InputToken, nil
}

// AddInputToken adds i to the "input_token" field.
func (m *TranscriptionStatsMutation) AddInputToken(i int) {
	if m.addinput_token != nil {
		*m.addinput_token += i
	} else {
		m.addinput_token = &i
	}
}

// AddedInputToken returns the value that was added to the "input_token" field in this mutation.
func (m *TranscriptionStatsMutation) AddedInputToken() (r int, exists bool) {
	v := m.addinput_token
	if v == nil {
		return
	}
	return *v, true
}

// ResetInputToken resets all changes to the "input_token" field.
func (m *TranscriptionStatsMutation) ResetInputToken() {
	m.input_token = nil
	m.addinput_token = nil
}

// SetOutputToken sets the "output_token" field.
func (m *TranscriptionStatsMutation) SetOutputToken(i int) {
	m.output_token = &i
	m.addoutput_token = nil
}

// OutputToken returns the value of the "output_token" field in the mutation.
func (m *TranscriptionStatsMutation) OutputToken() (r int, exists bool) {
	v := m.output_token
	if v == nil {
		return
	}
	return *v, true
}

// OldOutputToken returns the old "output_token" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldOutputToken(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutputToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutputToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutputToken: %w", err)
	}
	return oldValue.OutputToken, nil
}

// AddOutputToken adds i to the "output_token" field.
func (m *TranscriptionStatsMutation) AddOutputToken(i int) {
	if m.addoutput_token != nil {
		*m.addoutput_token += i
	} else {
		m.addoutput_token = &i
	}
}

// AddedOutputToken returns the value that was added to the "output_token" field in this mutation.
func (m *TranscriptionStatsMutation) AddedOutputToken() (r int, exists bool) {
	v := m.addoutput_token
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutputToken resets all changes to the "output_token" field.
func (m *TranscriptionStatsMutation) ResetOutputToken() {
	m.output_token = nil
	m.addoutput_token = nil
}

// SetModelName sets the "model_name" field.
func (m *TranscriptionStatsMutation) SetModelName(s string) {
	m.model_name = &s
}

// ModelName returns the value of the "model_name" field in the mutation.
func (m *TranscriptionStatsMutation) ModelName() (r string, exists bool) {
	v := m.model_name
	if v == nil {
		return
	}
	return *v, true
}

// OldModelName returns the old "model_name" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldModelName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelName: %w", err)
	}
	return oldValue.ModelName, nil
}

// ResetModelName resets all changes to the "model_name" field.
func (m *TranscriptionStatsMutation) ResetModelName() {
	m.model_name = nil
}

// SetCost sets the "cost" field.
func (m *TranscriptionStatsMutation) SetCost(f float64) {
	m.cost = &f
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *TranscriptionStatsMutation) Cost() (r float64, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds f to the "cost" field.
func (m *TranscriptionStatsMutation) AddCost(f float64) {
	if m.addcost != nil {
		*m.addcost += f
	} else {
		m.addcost = &f
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *TranscriptionStatsMutation) AddedCost() (r float64, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *TranscriptionStatsMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *TranscriptionStatsMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *TranscriptionStatsMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *TranscriptionStatsMutation) ResetOwnerID() {
	m.owner_id = nil
}

// SetTranslationID sets the "translation_id" field.
func (m *TranscriptionStatsMutation) SetTranslationID(i int) {
	m.translation = &i
}

// TranslationID returns the value of the "translation_id" field in the mutation.
func (m *TranscriptionStatsMutation) TranslationID() (r int, exists bool) {
	v := m.translation
	if v == nil {
		return
	}
	return *v, true
}

// OldTranslationID returns the old "translation_id" field's value of the TranscriptionStats entity.
// If the TranscriptionStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionStatsMutation) OldTranslationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranslationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranslationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranslationID: %w", err)
	}
	return oldValue.TranslationID, nil
}

// ResetTranslationID resets all changes to the "translation_id" field.
func (m *TranscriptionStatsMutation) ResetTranslationID() {
	m.translation = nil
}

// ClearTranslation clears the "translation" edge to the Translation entity.
func (m *TranscriptionStatsMutation) ClearTranslation() {
	m.clearedtranslation = true
	m.clearedFields[transcriptionstats.FieldTranslationID] = struct{}{}
}

// TranslationCleared reports if the "translation" edge to the Translation entity was cleared.
func (m *TranscriptionStatsMutation) TranslationCleared() bool {
	return m.clearedtranslation
}

// TranslationIDs returns the "translation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TranslationID instead. It exists only for internal usage by the builders.
func (m *TranscriptionStatsMutation) TranslationIDs() (ids []int) {
	if id := m.translation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTranslation resets all changes to the "translation" edge.
func (m *TranscriptionStatsMutation) ResetTranslation() {
	m.translation = nil
	m.clearedtranslation = false
}

// Where appends a list predicates to the TranscriptionStatsMutation builder.
func (m *TranscriptionStatsMutation) Where(ps ...predicate.TranscriptionStats) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TranscriptionStatsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TranscriptionStatsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TranscriptionStats, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TranscriptionStatsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TranscriptionStatsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TranscriptionStats).
func (m *TranscriptionStatsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranscriptionStatsMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.duration != nil {
		fields = append(fields, transcriptionstats.FieldDuration)
	}
	if m.input_token != nil {
		fields = append(fields, transcriptionstats.FieldInputToken)
	}
	if m.output_token != nil {
		fields = append(fields, transcriptionstats.FieldOutputToken)
	}
	if m.model_name != nil {
		fields = append(fields, transcriptionstats.FieldModelName)
	}
	if m.cost != nil {
		fields = append(fields, transcriptionstats.FieldCost)
	}
	if m.owner_id != nil {
		fields = append(fields, transcriptionstats.FieldOwnerID)
	}
	if m.translation != nil {
		fields = append(fields, transcriptionstats.FieldTranslationID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranscriptionStatsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transcriptionstats.FieldDuration:
		return m.Duration()
	case transcriptionstats.FieldInputToken:
		return m.InputToken()
	case transcriptionstats.FieldOutputToken:
		return m.OutputToken()
	case transcriptionstats.FieldModelName:
		return m.ModelName()
	case transcriptionstats.FieldCost:
		return m.Cost()
	case transcriptionstats.FieldOwnerID:
		return m.OwnerID()
	case transcriptionstats.FieldTranslationID:
		return m.TranslationID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranscriptionStatsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transcriptionstats.FieldDuration:
		return m.OldDuration(ctx)
	case transcriptionstats.FieldInputToken:
		return m.OldInputToken(ctx)
	case transcriptionstats.FieldOutputToken:
		return m.OldOutputToken(ctx)
	case transcriptionstats.FieldModelName:
		return m.OldModelName(ctx)
	case transcriptionstats.FieldCost:
		return m.OldCost(ctx)
	case transcriptionstats.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case transcriptionstats.FieldTranslationID:
		return m.OldTranslationID(ctx)
	}
	return nil, fmt.Errorf("unknown TranscriptionStats field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranscriptionStatsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transcriptionstats.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case transcriptionstats.FieldInputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInputToken(v)
		return nil
	case transcriptionstats.FieldOutputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutputToken(v)
		return nil
	case transcriptionstats.FieldModelName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelName(v)
		return nil
	case transcriptionstats.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case transcriptionstats.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case transcriptionstats.FieldTranslationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranslationID(v)
		return nil
	}
	return fmt.Errorf("unknown TranscriptionStats field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranscriptionStatsMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, transcriptionstats.FieldDuration)
	}
	if m.addinput_token != nil {
		fields = append(fields, transcriptionstats.FieldInputToken)
	}
	if m.addoutput_token != nil {
		fields = append(fields, transcriptionstats.FieldOutputToken)
	}
	if m.addcost != nil {
		fields = append(fields, transcriptionstats.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranscriptionStatsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transcriptionstats.FieldDuration:
		return m.AddedDuration()
	case transcriptionstats.FieldInputToken:
		return m.AddedInputToken()
	case transcriptionstats.FieldOutputToken:
		return m.AddedOutputToken()
	case transcriptionstats.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranscriptionStatsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transcriptionstats.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case transcriptionstats.FieldInputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInputToken(v)
		return nil
	case transcriptionstats.FieldOutputToken:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutputToken(v)
		return nil
	case transcriptionstats.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown TranscriptionStats numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranscriptionStatsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranscriptionStatsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranscriptionStatsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TranscriptionStats nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranscriptionStatsMutation) ResetField(name string) error {
	switch name {
	case transcriptionstats.FieldDuration:
		m.ResetDuration()
		return nil
	case transcriptionstats.FieldInputToken:
		m.ResetInputToken()
		return nil
	case transcriptionstats.FieldOutputToken:
		m.ResetOutputToken()
		return nil
	case transcriptionstats.FieldModelName:
		m.ResetModelName()
		return nil
	case transcriptionstats.FieldCost:
		m.ResetCost()
		return nil
	case transcriptionstats.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case transcriptionstats.FieldTranslationID:
		m.ResetTranslationID()
		return nil
	}
	return fmt.Errorf("unknown TranscriptionStats field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranscriptionStatsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.translation != nil {
		edges = append(edges, transcriptionstats.EdgeTranslation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranscriptionStatsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transcriptionstats.EdgeTranslation:
		if id := m.translation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranscriptionStatsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranscriptionStatsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranscriptionStatsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtranslation {
		edges = append(edges, transcriptionstats.EdgeTranslation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranscriptionStatsMutation) EdgeCleared(name string) bool {
	switch name {
	case transcriptionstats.EdgeTranslation:
		return m.clearedtranslation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranscriptionStatsMutation) ClearEdge(name string) error {
	switch name {
	case transcriptionstats.EdgeTranslation:
		m.ClearTranslation()
		return nil
	}
	return fmt.Errorf("unknown TranscriptionStats unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranscriptionStatsMutation) ResetEdge(name string) error {
	switch name {
	case transcriptionstats.EdgeTranslation:
		m.ResetTranslation()
		return nil
	}
	return fmt.Errorf("unknown TranscriptionStats edge %s", name)
}

// TranslationMutation represents an operation that mutates the Translation nodes in the graph.
type TranslationMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	content                    *string
	choices                    *[]map[string]interface{}
	appendchoices              []map[string]interface{}
	external_id                *string
	language_pair              *string
	owner_id                   *string
	clearedFields              map[string]struct{}
	transcription_stats        map[int]struct{}
	removedtranscription_stats map[int]struct{}
	clearedtranscription_stats bool
	done                       bool
	oldValue                   func(context.Context) (*Translation, error)
	predicates                 []predicate.Translation
}

var _ ent.Mutation = (*TranslationMutation)(nil)

// translationOption allows management of the mutation configuration using functional options.
type translationOption func(*TranslationMutation)

// newTranslationMutation creates new mutation for the Translation entity.
func newTranslationMutation(c config, op Op, opts ...translationOption) *TranslationMutation {
	m := &TranslationMutation{
		config:        c,
		op:            op,
		typ:           TypeTranslation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranslationID sets the ID field of the mutation.
func withTranslationID(id int) translationOption {
	return func(m *TranslationMutation) {
		var (
			err   error
			once  sync.Once
			value *Translation
		)
		m.oldValue = func(ctx context.Context) (*Translation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Translation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTranslation sets the old Translation of the mutation.
func withTranslation(node *Translation) translationOption {
	return func(m *TranslationMutation) {
		m.oldValue = func(context.Context) (*Translation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranslationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranslationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranslationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranslationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Translation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *TranslationMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TranslationMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TranslationMutation) ResetContent() {
	m.content = nil
}

// SetChoices sets the "choices" field.
func (m *TranslationMutation) SetChoices(value []map[string]interface{}) {
	m.choices = &value
	m.appendchoices = nil
}

// Choices returns the value of the "choices" field in the mutation.
func (m *TranslationMutation) Choices() (r []map[string]interface{}, exists bool) {
	v := m.choices
	if v == nil {
		return
	}
	return *v, true
}

// OldChoices returns the old "choices" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldChoices(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChoices is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChoices requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChoices: %w", err)
	}
	return oldValue.Choices, nil
}

// AppendChoices adds value to the "choices" field.
func (m *TranslationMutation) AppendChoices(value []map[string]interface{}) {
	m.appendchoices = append(m.appendchoices, value...)
}

// AppendedChoices returns the list of values that were appended to the "choices" field in this mutation.
func (m *TranslationMutation) AppendedChoices() ([]map[string]interface{}, bool) {
	if len(m.appendchoices) == 0 {
		return nil, false
	}
	return m.appendchoices, true
}

// ResetChoices resets all changes to the "choices" field.
func (m *TranslationMutation) ResetChoices() {
	m.choices = nil
	m.appendchoices = nil
}

// SetExternalID sets the "external_id" field.
func (m *TranslationMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *TranslationMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *TranslationMutation) ResetExternalID() {
	m.external_id = nil
}

// SetLanguagePair sets the "language_pair" field.
func (m *TranslationMutation) SetLanguagePair(s string) {
	m.language_pair = &s
}

// LanguagePair returns the value of the "language_pair" field in the mutation.
func (m *TranslationMutation) LanguagePair() (r string, exists bool) {
	v := m.language_pair
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguagePair returns the old "language_pair" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldLanguagePair(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguagePair is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguagePair requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguagePair: %w", err)
	}
	return oldValue.LanguagePair, nil
}

// ResetLanguagePair resets all changes to the "language_pair" field.
func (m *TranslationMutation) ResetLanguagePair() {
	m.language_pair = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *TranslationMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *TranslationMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *TranslationMutation) ResetOwnerID() {
	m.owner_id = nil
}

// AddTranscriptionStatIDs adds the "transcription_stats" edge to the TranscriptionStats entity by ids.
func (m *TranslationMutation) AddTranscriptionStatIDs(ids ...int) {
	if m.transcription_stats == nil {
		m.transcription_stats = make(map[int]struct{})
	}
	for i := range ids {
		m.transcription_stats[ids[i]] = struct{}{}
	}
}

// ClearTranscriptionStats clears the "transcription_stats" edge to the TranscriptionStats entity.
func (m *TranslationMutation) ClearTranscriptionStats() {
	m.clearedtranscription_stats = true
}

// TranscriptionStatsCleared reports if the "transcription_stats" edge to the TranscriptionStats entity was cleared.
func (m *TranslationMutation) TranscriptionStatsCleared() bool {
	return m.clearedtranscription_stats
}

// RemoveTranscriptionStatIDs removes the "transcription_stats" edge to the TranscriptionStats entity by IDs.
func (m *TranslationMutation) RemoveTranscriptionStatIDs(ids ...int) {
	if m.removedtranscription_stats == nil {
		m.removedtranscription_stats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.transcription_stats, ids[i])
		m.removedtranscription_stats[ids[i]] = struct{}{}
	}
}

// RemovedTranscriptionStats returns the removed IDs of the "transcription_stats" edge to the TranscriptionStats entity.
func (m *TranslationMutation) RemovedTranscriptionStatsIDs() (ids []int) {
	for id := range m.removedtranscription_stats {
		ids = append(ids, id)
	}
	return
}

// TranscriptionStatsIDs returns the "transcription_stats" edge IDs in the mutation.
func (m *TranslationMutation) TranscriptionStatsIDs() (ids []int) {
	for id := range m.transcription_stats {
		ids = append(ids, id)
	}
	return
}

// ResetTranscriptionStats resets all changes to the "transcription_stats" edge.
func (m *TranslationMutation) ResetTranscriptionStats() {
	m.transcription_stats = nil
	m.clearedtranscription_stats = false
	m.removedtranscription_stats = nil
}

// Where appends a list predicates to the TranslationMutation builder.
func (m *TranslationMutation) Where(ps ...predicate.Translation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TranslationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TranslationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Translation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TranslationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TranslationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Translation).
func (m *TranslationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranslationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.content != nil {
		fields = append(fields, translation.FieldContent)
	}
	if m.choices != nil {
		fields = append(fields, translation.FieldChoices)
	}
	if m.external_id != nil {
		fields = append(fields, translation.FieldExternalID)
	}
	if m.language_pair != nil {
		fields = append(fields, translation.FieldLanguagePair)
	}
	if m.owner_id != nil {
		fields = append(fields, translation.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranslationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case translation.FieldContent:
		return m.Content()
	case translation.FieldChoices:
		return m.Choices()
	case translation.FieldExternalID:
		return m.ExternalID()
	case translation.FieldLanguagePair:
		return m.LanguagePair()
	case translation.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranslationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case translation.FieldContent:
		return m.OldContent(ctx)
	case translation.FieldChoices:
		return m.OldChoices(ctx)
	case translation.FieldExternalID:
		return m.OldExternalID(ctx)
	case translation.FieldLanguagePair:
		return m.OldLanguagePair(ctx)
	case translation.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown Translation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranslationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case translation.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case translation.FieldChoices:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChoices(v)
		return nil
	case translation.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case translation.FieldLanguagePair:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguagePair(v)
		return nil
	case translation.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown Translation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranslationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranslationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranslationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Translation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranslationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranslationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranslationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Translation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranslationMutation) ResetField(name string) error {
	switch name {
	case translation.FieldContent:
		m.ResetContent()
		return nil
	case translation.FieldChoices:
		m.ResetChoices()
		return nil
	case translation.FieldExternalID:
		m.ResetExternalID()
		return nil
	case translation.FieldLanguagePair:
		m.ResetLanguagePair()
		return nil
	case translation.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown Translation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranslationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.transcription_stats != nil {
		edges = append(edges, translation.EdgeTranscriptionStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranslationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case translation.EdgeTranscriptionStats:
		ids := make([]ent.Value, 0, len(m.transcription_stats))
		for id := range m.transcription_stats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranslationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtranscription_stats != nil {
		edges = append(edges, translation.EdgeTranscriptionStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranslationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case translation.EdgeTranscriptionStats:
		ids := make([]ent.Value, 0, len(m.removedtranscription_stats))
		for id := range m.removedtranscription_stats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranslationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtranscription_stats {
		edges = append(edges, translation.EdgeTranscriptionStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranslationMutation) EdgeCleared(name string) bool {
	switch name {
	case translation.EdgeTranscriptionStats:
		return m.clearedtranscription_stats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranslationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Translation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranslationMutation) ResetEdge(name string) error {
	switch name {
	case translation.EdgeTranscriptionStats:
		m.ResetTranscriptionStats()
		return nil
	}
	return fmt.Errorf("unknown Translation edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	email         *string
	password_hash *string
	full_name     *string
	is_active     *bool
	created_at    *time.Time
	updated_at    *time.Time
	role          *string
	external_id   *string
	avatar_url    *string
	provider      *string
	provider_id   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ClearFullName clears the value of the "full_name" field.
func (m *UserMutation) ClearFullName() {
	m.full_name = nil
	m.clearedFields[user.FieldFullName] = struct{}{}
}

// FullNameCleared returns if the "full_name" field was cleared in this mutation.
func (m *UserMutation) FullNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFullName]
	return ok
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
	delete(m.clearedFields, user.FieldFullName)
}

// SetIsActive sets the "is_active" field.
func (m *UserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ClearRole clears the value of the "role" field.
func (m *UserMutation) ClearRole() {
	m.role = nil
	m.clearedFields[user.FieldRole] = struct{}{}
}

// RoleCleared returns if the "role" field was cleared in this mutation.
func (m *UserMutation) RoleCleared() bool {
	_, ok := m.clearedFields[user.FieldRole]
	return ok
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
	delete(m.clearedFields, user.FieldRole)
}

// SetExternalID sets the "external_id" field.
func (m *UserMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *UserMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *UserMutation) ResetExternalID() {
	m.external_id = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *UserMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[user.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *UserMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, user.FieldAvatarURL)
}

// SetProvider sets the "provider" field.
func (m *UserMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *UserMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *UserMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[user.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *UserMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[user.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *UserMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, user.FieldProvider)
}

// SetProviderID sets the "provider_id" field.
func (m *UserMutation) SetProviderID(s string) {
	m.provider_id = &s
}

// ProviderID returns the value of the "provider_id" field in the mutation.
func (m *UserMutation) ProviderID() (r string, exists bool) {
	v := m.provider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderID returns the old "provider_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProviderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderID: %w", err)
	}
	return oldValue.ProviderID, nil
}

// ClearProviderID clears the value of the "provider_id" field.
func (m *UserMutation) ClearProviderID() {
	m.provider_id = nil
	m.clearedFields[user.FieldProviderID] = struct{}{}
}

// ProviderIDCleared returns if the "provider_id" field was cleared in this mutation.
func (m *UserMutation) ProviderIDCleared() bool {
	_, ok := m.clearedFields[user.FieldProviderID]
	return ok
}

// ResetProviderID resets all changes to the "provider_id" field.
func (m *UserMutation) ResetProviderID() {
	m.provider_id = nil
	delete(m.clearedFields, user.FieldProviderID)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.is_active != nil {
		fields = append(fields, user.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.external_id != nil {
		fields = append(fields, user.FieldExternalID)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.provider != nil {
		fields = append(fields, user.FieldProvider)
	}
	if m.provider_id != nil {
		fields = append(fields, user.FieldProviderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldIsActive:
		return m.IsActive()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldRole:
		return m.Role()
	case user.FieldExternalID:
		return m.ExternalID()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	case user.FieldProvider:
		return m.Provider()
	case user.FieldProviderID:
		return m.ProviderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldIsActive:
		return m.OldIsActive(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldExternalID:
		return m.OldExternalID(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case user.FieldProvider:
		return m.OldProvider(ctx)
	case user.FieldProviderID:
		return m.OldProviderID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case user.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case user.FieldProviderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFullName) {
		fields = append(fields, user.FieldFullName)
	}
	if m.FieldCleared(user.FieldRole) {
		fields = append(fields, user.FieldRole)
	}
	if m.FieldCleared(user.FieldAvatarURL) {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.FieldCleared(user.FieldProvider) {
		fields = append(fields, user.FieldProvider)
	}
	if m.FieldCleared(user.FieldProviderID) {
		fields = append(fields, user.FieldProviderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFullName:
		m.ClearFullName()
		return nil
	case user.FieldRole:
		m.ClearRole()
		return nil
	case user.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	case user.FieldProvider:
		m.ClearProvider()
		return nil
	case user.FieldProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldIsActive:
		m.ResetIsActive()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldExternalID:
		m.ResetExternalID()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case user.FieldProvider:
		m.ResetProvider()
		return nil
	case user.FieldProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
