// Code generated by ent, DO NOT EDIT.

package languagedetection

import (
	"ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldID, id))
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldQuery, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldDuration, v))
}

// ModelName applies equality check predicate on the "model_name" field. It's identical to ModelNameEQ.
func ModelName(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldModelName, v))
}

// InputToken applies equality check predicate on the "input_token" field. It's identical to InputTokenEQ.
func InputToken(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldInputToken, v))
}

// OutputToken applies equality check predicate on the "output_token" field. It's identical to OutputTokenEQ.
func OutputToken(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldOutputToken, v))
}

// CachedToken applies equality check predicate on the "cached_token" field. It's identical to CachedTokenEQ.
func CachedToken(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldCachedToken, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldOwnerID, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldCost, v))
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldQuery, v))
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldQuery, v))
}

// QueryIn applies the In predicate on the "query" field.
func QueryIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldQuery, vs...))
}

// QueryNotIn applies the NotIn predicate on the "query" field.
func QueryNotIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldQuery, vs...))
}

// QueryGT applies the GT predicate on the "query" field.
func QueryGT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldQuery, v))
}

// QueryGTE applies the GTE predicate on the "query" field.
func QueryGTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldQuery, v))
}

// QueryLT applies the LT predicate on the "query" field.
func QueryLT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldQuery, v))
}

// QueryLTE applies the LTE predicate on the "query" field.
func QueryLTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldQuery, v))
}

// QueryContains applies the Contains predicate on the "query" field.
func QueryContains(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContains(FieldQuery, v))
}

// QueryHasPrefix applies the HasPrefix predicate on the "query" field.
func QueryHasPrefix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasPrefix(FieldQuery, v))
}

// QueryHasSuffix applies the HasSuffix predicate on the "query" field.
func QueryHasSuffix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasSuffix(FieldQuery, v))
}

// QueryEqualFold applies the EqualFold predicate on the "query" field.
func QueryEqualFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEqualFold(FieldQuery, v))
}

// QueryContainsFold applies the ContainsFold predicate on the "query" field.
func QueryContainsFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContainsFold(FieldQuery, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldDuration, v))
}

// ModelNameEQ applies the EQ predicate on the "model_name" field.
func ModelNameEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldModelName, v))
}

// ModelNameNEQ applies the NEQ predicate on the "model_name" field.
func ModelNameNEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldModelName, v))
}

// ModelNameIn applies the In predicate on the "model_name" field.
func ModelNameIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldModelName, vs...))
}

// ModelNameNotIn applies the NotIn predicate on the "model_name" field.
func ModelNameNotIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldModelName, vs...))
}

// ModelNameGT applies the GT predicate on the "model_name" field.
func ModelNameGT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldModelName, v))
}

// ModelNameGTE applies the GTE predicate on the "model_name" field.
func ModelNameGTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldModelName, v))
}

// ModelNameLT applies the LT predicate on the "model_name" field.
func ModelNameLT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldModelName, v))
}

// ModelNameLTE applies the LTE predicate on the "model_name" field.
func ModelNameLTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldModelName, v))
}

// ModelNameContains applies the Contains predicate on the "model_name" field.
func ModelNameContains(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContains(FieldModelName, v))
}

// ModelNameHasPrefix applies the HasPrefix predicate on the "model_name" field.
func ModelNameHasPrefix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasPrefix(FieldModelName, v))
}

// ModelNameHasSuffix applies the HasSuffix predicate on the "model_name" field.
func ModelNameHasSuffix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasSuffix(FieldModelName, v))
}

// ModelNameEqualFold applies the EqualFold predicate on the "model_name" field.
func ModelNameEqualFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEqualFold(FieldModelName, v))
}

// ModelNameContainsFold applies the ContainsFold predicate on the "model_name" field.
func ModelNameContainsFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContainsFold(FieldModelName, v))
}

// InputTokenEQ applies the EQ predicate on the "input_token" field.
func InputTokenEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldInputToken, v))
}

// InputTokenNEQ applies the NEQ predicate on the "input_token" field.
func InputTokenNEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldInputToken, v))
}

// InputTokenIn applies the In predicate on the "input_token" field.
func InputTokenIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldInputToken, vs...))
}

// InputTokenNotIn applies the NotIn predicate on the "input_token" field.
func InputTokenNotIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldInputToken, vs...))
}

// InputTokenGT applies the GT predicate on the "input_token" field.
func InputTokenGT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldInputToken, v))
}

// InputTokenGTE applies the GTE predicate on the "input_token" field.
func InputTokenGTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldInputToken, v))
}

// InputTokenLT applies the LT predicate on the "input_token" field.
func InputTokenLT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldInputToken, v))
}

// InputTokenLTE applies the LTE predicate on the "input_token" field.
func InputTokenLTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldInputToken, v))
}

// OutputTokenEQ applies the EQ predicate on the "output_token" field.
func OutputTokenEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldOutputToken, v))
}

// OutputTokenNEQ applies the NEQ predicate on the "output_token" field.
func OutputTokenNEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldOutputToken, v))
}

// OutputTokenIn applies the In predicate on the "output_token" field.
func OutputTokenIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldOutputToken, vs...))
}

// OutputTokenNotIn applies the NotIn predicate on the "output_token" field.
func OutputTokenNotIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldOutputToken, vs...))
}

// OutputTokenGT applies the GT predicate on the "output_token" field.
func OutputTokenGT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldOutputToken, v))
}

// OutputTokenGTE applies the GTE predicate on the "output_token" field.
func OutputTokenGTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldOutputToken, v))
}

// OutputTokenLT applies the LT predicate on the "output_token" field.
func OutputTokenLT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldOutputToken, v))
}

// OutputTokenLTE applies the LTE predicate on the "output_token" field.
func OutputTokenLTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldOutputToken, v))
}

// CachedTokenEQ applies the EQ predicate on the "cached_token" field.
func CachedTokenEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldCachedToken, v))
}

// CachedTokenNEQ applies the NEQ predicate on the "cached_token" field.
func CachedTokenNEQ(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldCachedToken, v))
}

// CachedTokenIn applies the In predicate on the "cached_token" field.
func CachedTokenIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldCachedToken, vs...))
}

// CachedTokenNotIn applies the NotIn predicate on the "cached_token" field.
func CachedTokenNotIn(vs ...int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldCachedToken, vs...))
}

// CachedTokenGT applies the GT predicate on the "cached_token" field.
func CachedTokenGT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldCachedToken, v))
}

// CachedTokenGTE applies the GTE predicate on the "cached_token" field.
func CachedTokenGTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldCachedToken, v))
}

// CachedTokenLT applies the LT predicate on the "cached_token" field.
func CachedTokenLT(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldCachedToken, v))
}

// CachedTokenLTE applies the LTE predicate on the "cached_token" field.
func CachedTokenLTE(v int) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldCachedToken, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldContainsFold(FieldOwnerID, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.FieldLTE(FieldCost, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LanguageDetection) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LanguageDetection) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LanguageDetection) predicate.LanguageDetection {
	return predicate.LanguageDetection(sql.NotPredicates(p))
}
