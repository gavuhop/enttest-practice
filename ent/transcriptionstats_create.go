// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/transcriptionstats"
	"ent/ent/translation"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TranscriptionStatsCreate is the builder for creating a TranscriptionStats entity.
type TranscriptionStatsCreate struct {
	config
	mutation *TranscriptionStatsMutation
	hooks    []Hook
}

// SetDuration sets the "duration" field.
func (_c *TranscriptionStatsCreate) SetDuration(v int64) *TranscriptionStatsCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetInputToken sets the "input_token" field.
func (_c *TranscriptionStatsCreate) SetInputToken(v int) *TranscriptionStatsCreate {
	_c.mutation.SetInputToken(v)
	return _c
}

// SetOutputToken sets the "output_token" field.
func (_c *TranscriptionStatsCreate) SetOutputToken(v int) *TranscriptionStatsCreate {
	_c.mutation.SetOutputToken(v)
	return _c
}

// SetModelName sets the "model_name" field.
func (_c *TranscriptionStatsCreate) SetModelName(v string) *TranscriptionStatsCreate {
	_c.mutation.SetModelName(v)
	return _c
}

// SetCost sets the "cost" field.
func (_c *TranscriptionStatsCreate) SetCost(v float64) *TranscriptionStatsCreate {
	_c.mutation.SetCost(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *TranscriptionStatsCreate) SetOwnerID(v string) *TranscriptionStatsCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetTranslationID sets the "translation_id" field.
func (_c *TranscriptionStatsCreate) SetTranslationID(v int) *TranscriptionStatsCreate {
	_c.mutation.SetTranslationID(v)
	return _c
}

// SetTranslation sets the "translation" edge to the Translation entity.
func (_c *TranscriptionStatsCreate) SetTranslation(v *Translation) *TranscriptionStatsCreate {
	return _c.SetTranslationID(v.ID)
}

// Mutation returns the TranscriptionStatsMutation object of the builder.
func (_c *TranscriptionStatsCreate) Mutation() *TranscriptionStatsMutation {
	return _c.mutation
}

// Save creates the TranscriptionStats in the database.
func (_c *TranscriptionStatsCreate) Save(ctx context.Context) (*TranscriptionStats, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TranscriptionStatsCreate) SaveX(ctx context.Context) *TranscriptionStats {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TranscriptionStatsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TranscriptionStatsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TranscriptionStatsCreate) check() error {
	if _, ok := _c.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "TranscriptionStats.duration"`)}
	}
	if _, ok := _c.mutation.InputToken(); !ok {
		return &ValidationError{Name: "input_token", err: errors.New(`ent: missing required field "TranscriptionStats.input_token"`)}
	}
	if _, ok := _c.mutation.OutputToken(); !ok {
		return &ValidationError{Name: "output_token", err: errors.New(`ent: missing required field "TranscriptionStats.output_token"`)}
	}
	if _, ok := _c.mutation.ModelName(); !ok {
		return &ValidationError{Name: "model_name", err: errors.New(`ent: missing required field "TranscriptionStats.model_name"`)}
	}
	if v, ok := _c.mutation.ModelName(); ok {
		if err := transcriptionstats.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`ent: validator failed for field "TranscriptionStats.model_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "TranscriptionStats.cost"`)}
	}
	if _, ok := _c.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "TranscriptionStats.owner_id"`)}
	}
	if _, ok := _c.mutation.TranslationID(); !ok {
		return &ValidationError{Name: "translation_id", err: errors.New(`ent: missing required field "TranscriptionStats.translation_id"`)}
	}
	if len(_c.mutation.TranslationIDs()) == 0 {
		return &ValidationError{Name: "translation", err: errors.New(`ent: missing required edge "TranscriptionStats.translation"`)}
	}
	return nil
}

func (_c *TranscriptionStatsCreate) sqlSave(ctx context.Context) (*TranscriptionStats, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TranscriptionStatsCreate) createSpec() (*TranscriptionStats, *sqlgraph.CreateSpec) {
	var (
		_node = &TranscriptionStats{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(transcriptionstats.Table, sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(transcriptionstats.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.InputToken(); ok {
		_spec.SetField(transcriptionstats.FieldInputToken, field.TypeInt, value)
		_node.InputToken = value
	}
	if value, ok := _c.mutation.OutputToken(); ok {
		_spec.SetField(transcriptionstats.FieldOutputToken, field.TypeInt, value)
		_node.OutputToken = value
	}
	if value, ok := _c.mutation.ModelName(); ok {
		_spec.SetField(transcriptionstats.FieldModelName, field.TypeString, value)
		_node.ModelName = value
	}
	if value, ok := _c.mutation.Cost(); ok {
		_spec.SetField(transcriptionstats.FieldCost, field.TypeFloat64, value)
		_node.Cost = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(transcriptionstats.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if nodes := _c.mutation.TranslationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcriptionstats.TranslationTable,
			Columns: []string{transcriptionstats.TranslationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TranslationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TranscriptionStatsCreateBulk is the builder for creating many TranscriptionStats entities in bulk.
type TranscriptionStatsCreateBulk struct {
	config
	err      error
	builders []*TranscriptionStatsCreate
}

// Save creates the TranscriptionStats entities in the database.
func (_c *TranscriptionStatsCreateBulk) Save(ctx context.Context) ([]*TranscriptionStats, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TranscriptionStats, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TranscriptionStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TranscriptionStatsCreateBulk) SaveX(ctx context.Context) []*TranscriptionStats {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TranscriptionStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TranscriptionStatsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
