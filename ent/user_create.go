// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetPasswordHash sets the "password_hash" field.
func (_c *UserCreate) SetPasswordHash(v string) *UserCreate {
	_c.mutation.SetPasswordHash(v)
	return _c
}

// SetFullName sets the "full_name" field.
func (_c *UserCreate) SetFullName(v string) *UserCreate {
	_c.mutation.SetFullName(v)
	return _c
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableFullName(v *string) *UserCreate {
	if v != nil {
		_c.SetFullName(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *UserCreate) SetIsActive(v bool) *UserCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *UserCreate) SetNillableIsActive(v *bool) *UserCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetRole sets the "role" field.
func (_c *UserCreate) SetRole(v string) *UserCreate {
	_c.mutation.SetRole(v)
	return _c
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_c *UserCreate) SetNillableRole(v *string) *UserCreate {
	if v != nil {
		_c.SetRole(*v)
	}
	return _c
}

// SetExternalID sets the "external_id" field.
func (_c *UserCreate) SetExternalID(v string) *UserCreate {
	_c.mutation.SetExternalID(v)
	return _c
}

// SetAvatarURL sets the "avatar_url" field.
func (_c *UserCreate) SetAvatarURL(v string) *UserCreate {
	_c.mutation.SetAvatarURL(v)
	return _c
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarURL(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatarURL(*v)
	}
	return _c
}

// SetProvider sets the "provider" field.
func (_c *UserCreate) SetProvider(v string) *UserCreate {
	_c.mutation.SetProvider(v)
	return _c
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_c *UserCreate) SetNillableProvider(v *string) *UserCreate {
	if v != nil {
		_c.SetProvider(*v)
	}
	return _c
}

// SetProviderID sets the "provider_id" field.
func (_c *UserCreate) SetProviderID(v string) *UserCreate {
	_c.mutation.SetProviderID(v)
	return _c
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableProviderID(v *string) *UserCreate {
	if v != nil {
		_c.SetProviderID(*v)
	}
	return _c
}

// SetProviderName sets the "provider_name" field.
func (_c *UserCreate) SetProviderName(v string) *UserCreate {
	_c.mutation.SetProviderName(v)
	return _c
}

// SetNillableProviderName sets the "provider_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableProviderName(v *string) *UserCreate {
	if v != nil {
		_c.SetProviderName(*v)
	}
	return _c
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := user.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Role(); !ok {
		v := user.DefaultRole
		_c.mutation.SetRole(v)
	}
	if _, ok := _c.mutation.Provider(); !ok {
		v := user.DefaultProvider
		_c.mutation.SetProvider(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := _c.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if v, ok := _c.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "User.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if v, ok := _c.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExternalID(); !ok {
		return &ValidationError{Name: "external_id", err: errors.New(`ent: missing required field "User.external_id"`)}
	}
	if v, ok := _c.mutation.ExternalID(); ok {
		if err := user.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "User.external_id": %w`, err)}
		}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := _c.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := _c.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := _c.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := _c.mutation.Provider(); ok {
		_spec.SetField(user.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := _c.mutation.ProviderID(); ok {
		_spec.SetField(user.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := _c.mutation.ProviderName(); ok {
		_spec.SetField(user.FieldProviderName, field.TypeString, value)
		_node.ProviderName = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
