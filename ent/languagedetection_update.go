// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/languagedetection"
	"ent/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageDetectionUpdate is the builder for updating LanguageDetection entities.
type LanguageDetectionUpdate struct {
	config
	hooks    []Hook
	mutation *LanguageDetectionMutation
}

// Where appends a list predicates to the LanguageDetectionUpdate builder.
func (_u *LanguageDetectionUpdate) Where(ps ...predicate.LanguageDetection) *LanguageDetectionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetQuery sets the "query" field.
func (_u *LanguageDetectionUpdate) SetQuery(v string) *LanguageDetectionUpdate {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableQuery(v *string) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// SetDetectedLanguages sets the "detected_languages" field.
func (_u *LanguageDetectionUpdate) SetDetectedLanguages(v map[string]interface{}) *LanguageDetectionUpdate {
	_u.mutation.SetDetectedLanguages(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *LanguageDetectionUpdate) SetDuration(v int64) *LanguageDetectionUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableDuration(v *int64) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *LanguageDetectionUpdate) AddDuration(v int64) *LanguageDetectionUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *LanguageDetectionUpdate) SetModelName(v string) *LanguageDetectionUpdate {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableModelName(v *string) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// SetInputToken sets the "input_token" field.
func (_u *LanguageDetectionUpdate) SetInputToken(v int) *LanguageDetectionUpdate {
	_u.mutation.ResetInputToken()
	_u.mutation.SetInputToken(v)
	return _u
}

// SetNillableInputToken sets the "input_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableInputToken(v *int) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetInputToken(*v)
	}
	return _u
}

// AddInputToken adds value to the "input_token" field.
func (_u *LanguageDetectionUpdate) AddInputToken(v int) *LanguageDetectionUpdate {
	_u.mutation.AddInputToken(v)
	return _u
}

// SetOutputToken sets the "output_token" field.
func (_u *LanguageDetectionUpdate) SetOutputToken(v int) *LanguageDetectionUpdate {
	_u.mutation.ResetOutputToken()
	_u.mutation.SetOutputToken(v)
	return _u
}

// SetNillableOutputToken sets the "output_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableOutputToken(v *int) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetOutputToken(*v)
	}
	return _u
}

// AddOutputToken adds value to the "output_token" field.
func (_u *LanguageDetectionUpdate) AddOutputToken(v int) *LanguageDetectionUpdate {
	_u.mutation.AddOutputToken(v)
	return _u
}

// SetCachedToken sets the "cached_token" field.
func (_u *LanguageDetectionUpdate) SetCachedToken(v int) *LanguageDetectionUpdate {
	_u.mutation.ResetCachedToken()
	_u.mutation.SetCachedToken(v)
	return _u
}

// SetNillableCachedToken sets the "cached_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableCachedToken(v *int) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetCachedToken(*v)
	}
	return _u
}

// AddCachedToken adds value to the "cached_token" field.
func (_u *LanguageDetectionUpdate) AddCachedToken(v int) *LanguageDetectionUpdate {
	_u.mutation.AddCachedToken(v)
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *LanguageDetectionUpdate) SetOwnerID(v string) *LanguageDetectionUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableOwnerID(v *string) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetCost sets the "cost" field.
func (_u *LanguageDetectionUpdate) SetCost(v float64) *LanguageDetectionUpdate {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *LanguageDetectionUpdate) SetNillableCost(v *float64) *LanguageDetectionUpdate {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *LanguageDetectionUpdate) AddCost(v float64) *LanguageDetectionUpdate {
	_u.mutation.AddCost(v)
	return _u
}

// Mutation returns the LanguageDetectionMutation object of the builder.
func (_u *LanguageDetectionUpdate) Mutation() *LanguageDetectionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LanguageDetectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LanguageDetectionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LanguageDetectionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LanguageDetectionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LanguageDetectionUpdate) check() error {
	if v, ok := _u.mutation.ModelName(); ok {
		if err := languagedetection.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`ent: validator failed for field "LanguageDetection.model_name": %w`, err)}
		}
	}
	return nil
}

func (_u *LanguageDetectionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(languagedetection.Table, languagedetection.Columns, sqlgraph.NewFieldSpec(languagedetection.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(languagedetection.FieldQuery, field.TypeString, value)
	}
	if value, ok := _u.mutation.DetectedLanguages(); ok {
		_spec.SetField(languagedetection.FieldDetectedLanguages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(languagedetection.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(languagedetection.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(languagedetection.FieldModelName, field.TypeString, value)
	}
	if value, ok := _u.mutation.InputToken(); ok {
		_spec.SetField(languagedetection.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInputToken(); ok {
		_spec.AddField(languagedetection.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OutputToken(); ok {
		_spec.SetField(languagedetection.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOutputToken(); ok {
		_spec.AddField(languagedetection.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CachedToken(); ok {
		_spec.SetField(languagedetection.FieldCachedToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCachedToken(); ok {
		_spec.AddField(languagedetection.FieldCachedToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(languagedetection.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(languagedetection.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(languagedetection.FieldCost, field.TypeFloat64, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{languagedetection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LanguageDetectionUpdateOne is the builder for updating a single LanguageDetection entity.
type LanguageDetectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LanguageDetectionMutation
}

// SetQuery sets the "query" field.
func (_u *LanguageDetectionUpdateOne) SetQuery(v string) *LanguageDetectionUpdateOne {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableQuery(v *string) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// SetDetectedLanguages sets the "detected_languages" field.
func (_u *LanguageDetectionUpdateOne) SetDetectedLanguages(v map[string]interface{}) *LanguageDetectionUpdateOne {
	_u.mutation.SetDetectedLanguages(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *LanguageDetectionUpdateOne) SetDuration(v int64) *LanguageDetectionUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableDuration(v *int64) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *LanguageDetectionUpdateOne) AddDuration(v int64) *LanguageDetectionUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *LanguageDetectionUpdateOne) SetModelName(v string) *LanguageDetectionUpdateOne {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableModelName(v *string) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// SetInputToken sets the "input_token" field.
func (_u *LanguageDetectionUpdateOne) SetInputToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.ResetInputToken()
	_u.mutation.SetInputToken(v)
	return _u
}

// SetNillableInputToken sets the "input_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableInputToken(v *int) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetInputToken(*v)
	}
	return _u
}

// AddInputToken adds value to the "input_token" field.
func (_u *LanguageDetectionUpdateOne) AddInputToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.AddInputToken(v)
	return _u
}

// SetOutputToken sets the "output_token" field.
func (_u *LanguageDetectionUpdateOne) SetOutputToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.ResetOutputToken()
	_u.mutation.SetOutputToken(v)
	return _u
}

// SetNillableOutputToken sets the "output_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableOutputToken(v *int) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetOutputToken(*v)
	}
	return _u
}

// AddOutputToken adds value to the "output_token" field.
func (_u *LanguageDetectionUpdateOne) AddOutputToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.AddOutputToken(v)
	return _u
}

// SetCachedToken sets the "cached_token" field.
func (_u *LanguageDetectionUpdateOne) SetCachedToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.ResetCachedToken()
	_u.mutation.SetCachedToken(v)
	return _u
}

// SetNillableCachedToken sets the "cached_token" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableCachedToken(v *int) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetCachedToken(*v)
	}
	return _u
}

// AddCachedToken adds value to the "cached_token" field.
func (_u *LanguageDetectionUpdateOne) AddCachedToken(v int) *LanguageDetectionUpdateOne {
	_u.mutation.AddCachedToken(v)
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *LanguageDetectionUpdateOne) SetOwnerID(v string) *LanguageDetectionUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableOwnerID(v *string) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetCost sets the "cost" field.
func (_u *LanguageDetectionUpdateOne) SetCost(v float64) *LanguageDetectionUpdateOne {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *LanguageDetectionUpdateOne) SetNillableCost(v *float64) *LanguageDetectionUpdateOne {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *LanguageDetectionUpdateOne) AddCost(v float64) *LanguageDetectionUpdateOne {
	_u.mutation.AddCost(v)
	return _u
}

// Mutation returns the LanguageDetectionMutation object of the builder.
func (_u *LanguageDetectionUpdateOne) Mutation() *LanguageDetectionMutation {
	return _u.mutation
}

// Where appends a list predicates to the LanguageDetectionUpdate builder.
func (_u *LanguageDetectionUpdateOne) Where(ps ...predicate.LanguageDetection) *LanguageDetectionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LanguageDetectionUpdateOne) Select(field string, fields ...string) *LanguageDetectionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated LanguageDetection entity.
func (_u *LanguageDetectionUpdateOne) Save(ctx context.Context) (*LanguageDetection, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LanguageDetectionUpdateOne) SaveX(ctx context.Context) *LanguageDetection {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LanguageDetectionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LanguageDetectionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LanguageDetectionUpdateOne) check() error {
	if v, ok := _u.mutation.ModelName(); ok {
		if err := languagedetection.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`ent: validator failed for field "LanguageDetection.model_name": %w`, err)}
		}
	}
	return nil
}

func (_u *LanguageDetectionUpdateOne) sqlSave(ctx context.Context) (_node *LanguageDetection, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(languagedetection.Table, languagedetection.Columns, sqlgraph.NewFieldSpec(languagedetection.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LanguageDetection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, languagedetection.FieldID)
		for _, f := range fields {
			if !languagedetection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != languagedetection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(languagedetection.FieldQuery, field.TypeString, value)
	}
	if value, ok := _u.mutation.DetectedLanguages(); ok {
		_spec.SetField(languagedetection.FieldDetectedLanguages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(languagedetection.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(languagedetection.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(languagedetection.FieldModelName, field.TypeString, value)
	}
	if value, ok := _u.mutation.InputToken(); ok {
		_spec.SetField(languagedetection.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInputToken(); ok {
		_spec.AddField(languagedetection.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OutputToken(); ok {
		_spec.SetField(languagedetection.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOutputToken(); ok {
		_spec.AddField(languagedetection.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CachedToken(); ok {
		_spec.SetField(languagedetection.FieldCachedToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCachedToken(); ok {
		_spec.AddField(languagedetection.FieldCachedToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(languagedetection.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(languagedetection.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(languagedetection.FieldCost, field.TypeFloat64, value)
	}
	_node = &LanguageDetection{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{languagedetection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
