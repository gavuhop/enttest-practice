// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ent/ent/transcriptionstats"
	"ent/ent/translation"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TranscriptionStats is the model entity for the TranscriptionStats schema.
type TranscriptionStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int64 `json:"duration,omitempty"`
	// InputToken holds the value of the "input_token" field.
	InputToken int `json:"input_token,omitempty"`
	// OutputToken holds the value of the "output_token" field.
	OutputToken int `json:"output_token,omitempty"`
	// ModelName holds the value of the "model_name" field.
	ModelName string `json:"model_name,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost float64 `json:"cost,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// TranslationID holds the value of the "translation_id" field.
	TranslationID int `json:"translation_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TranscriptionStatsQuery when eager-loading is set.
	Edges        TranscriptionStatsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TranscriptionStatsEdges holds the relations/edges for other nodes in the graph.
type TranscriptionStatsEdges struct {
	// Translation holds the value of the translation edge.
	Translation *Translation `json:"translation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TranslationOrErr returns the Translation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TranscriptionStatsEdges) TranslationOrErr() (*Translation, error) {
	if e.Translation != nil {
		return e.Translation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: translation.Label}
	}
	return nil, &NotLoadedError{edge: "translation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TranscriptionStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transcriptionstats.FieldCost:
			values[i] = new(sql.NullFloat64)
		case transcriptionstats.FieldID, transcriptionstats.FieldDuration, transcriptionstats.FieldInputToken, transcriptionstats.FieldOutputToken, transcriptionstats.FieldTranslationID:
			values[i] = new(sql.NullInt64)
		case transcriptionstats.FieldModelName, transcriptionstats.FieldOwnerID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TranscriptionStats fields.
func (_m *TranscriptionStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transcriptionstats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case transcriptionstats.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = value.Int64
			}
		case transcriptionstats.FieldInputToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_token", values[i])
			} else if value.Valid {
				_m.InputToken = int(value.Int64)
			}
		case transcriptionstats.FieldOutputToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_token", values[i])
			} else if value.Valid {
				_m.OutputToken = int(value.Int64)
			}
		case transcriptionstats.FieldModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_name", values[i])
			} else if value.Valid {
				_m.ModelName = value.String
			}
		case transcriptionstats.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				_m.Cost = value.Float64
			}
		case transcriptionstats.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case transcriptionstats.FieldTranslationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field translation_id", values[i])
			} else if value.Valid {
				_m.TranslationID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TranscriptionStats.
// This includes values selected through modifiers, order, etc.
func (_m *TranscriptionStats) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTranslation queries the "translation" edge of the TranscriptionStats entity.
func (_m *TranscriptionStats) QueryTranslation() *TranslationQuery {
	return NewTranscriptionStatsClient(_m.config).QueryTranslation(_m)
}

// Update returns a builder for updating this TranscriptionStats.
// Note that you need to call TranscriptionStats.Unwrap() before calling this method if this TranscriptionStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TranscriptionStats) Update() *TranscriptionStatsUpdateOne {
	return NewTranscriptionStatsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TranscriptionStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TranscriptionStats) Unwrap() *TranscriptionStats {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TranscriptionStats is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TranscriptionStats) String() string {
	var builder strings.Builder
	builder.WriteString("TranscriptionStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Duration))
	builder.WriteString(", ")
	builder.WriteString("input_token=")
	builder.WriteString(fmt.Sprintf("%v", _m.InputToken))
	builder.WriteString(", ")
	builder.WriteString("output_token=")
	builder.WriteString(fmt.Sprintf("%v", _m.OutputToken))
	builder.WriteString(", ")
	builder.WriteString("model_name=")
	builder.WriteString(_m.ModelName)
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.Cost))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("translation_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TranslationID))
	builder.WriteByte(')')
	return builder.String()
}

// TranscriptionStatsSlice is a parsable slice of TranscriptionStats.
type TranscriptionStatsSlice []*TranscriptionStats
