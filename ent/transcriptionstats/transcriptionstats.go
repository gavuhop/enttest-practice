// Code generated by ent, DO NOT EDIT.

package transcriptionstats

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transcriptionstats type in the database.
	Label = "transcription_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldInputToken holds the string denoting the input_token field in the database.
	FieldInputToken = "input_token"
	// FieldOutputToken holds the string denoting the output_token field in the database.
	FieldOutputToken = "output_token"
	// FieldModelName holds the string denoting the model_name field in the database.
	FieldModelName = "model_name"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldTranslationID holds the string denoting the translation_id field in the database.
	FieldTranslationID = "translation_id"
	// EdgeTranslation holds the string denoting the translation edge name in mutations.
	EdgeTranslation = "translation"
	// Table holds the table name of the transcriptionstats in the database.
	Table = "transcription_stats"
	// TranslationTable is the table that holds the translation relation/edge.
	TranslationTable = "transcription_stats"
	// TranslationInverseTable is the table name for the Translation entity.
	// It exists in this package in order to avoid circular dependency with the "translation" package.
	TranslationInverseTable = "translations"
	// TranslationColumn is the table column denoting the translation relation/edge.
	TranslationColumn = "translation_id"
)

// Columns holds all SQL columns for transcriptionstats fields.
var Columns = []string{
	FieldID,
	FieldDuration,
	FieldInputToken,
	FieldOutputToken,
	FieldModelName,
	FieldCost,
	FieldOwnerID,
	FieldTranslationID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ModelNameValidator is a validator for the "model_name" field. It is called by the builders before save.
	ModelNameValidator func(string) error
)

// OrderOption defines the ordering options for the TranscriptionStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByInputToken orders the results by the input_token field.
func ByInputToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputToken, opts...).ToFunc()
}

// ByOutputToken orders the results by the output_token field.
func ByOutputToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputToken, opts...).ToFunc()
}

// ByModelName orders the results by the model_name field.
func ByModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelName, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByTranslationID orders the results by the translation_id field.
func ByTranslationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranslationID, opts...).ToFunc()
}

// ByTranslationField orders the results by translation field.
func ByTranslationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationStep(), sql.OrderByField(field, opts...))
	}
}
func newTranslationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TranslationTable, TranslationColumn),
	)
}
