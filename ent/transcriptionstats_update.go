// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/predicate"
	"ent/ent/transcriptionstats"
	"ent/ent/translation"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TranscriptionStatsUpdate is the builder for updating TranscriptionStats entities.
type TranscriptionStatsUpdate struct {
	config
	hooks    []Hook
	mutation *TranscriptionStatsMutation
}

// Where appends a list predicates to the TranscriptionStatsUpdate builder.
func (_u *TranscriptionStatsUpdate) Where(ps ...predicate.TranscriptionStats) *TranscriptionStatsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *TranscriptionStatsUpdate) SetDuration(v int64) *TranscriptionStatsUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableDuration(v *int64) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *TranscriptionStatsUpdate) AddDuration(v int64) *TranscriptionStatsUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// SetInputToken sets the "input_token" field.
func (_u *TranscriptionStatsUpdate) SetInputToken(v int) *TranscriptionStatsUpdate {
	_u.mutation.ResetInputToken()
	_u.mutation.SetInputToken(v)
	return _u
}

// SetNillableInputToken sets the "input_token" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableInputToken(v *int) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetInputToken(*v)
	}
	return _u
}

// AddInputToken adds value to the "input_token" field.
func (_u *TranscriptionStatsUpdate) AddInputToken(v int) *TranscriptionStatsUpdate {
	_u.mutation.AddInputToken(v)
	return _u
}

// SetOutputToken sets the "output_token" field.
func (_u *TranscriptionStatsUpdate) SetOutputToken(v int) *TranscriptionStatsUpdate {
	_u.mutation.ResetOutputToken()
	_u.mutation.SetOutputToken(v)
	return _u
}

// SetNillableOutputToken sets the "output_token" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableOutputToken(v *int) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetOutputToken(*v)
	}
	return _u
}

// AddOutputToken adds value to the "output_token" field.
func (_u *TranscriptionStatsUpdate) AddOutputToken(v int) *TranscriptionStatsUpdate {
	_u.mutation.AddOutputToken(v)
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *TranscriptionStatsUpdate) SetModelName(v string) *TranscriptionStatsUpdate {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableModelName(v *string) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// SetCost sets the "cost" field.
func (_u *TranscriptionStatsUpdate) SetCost(v float64) *TranscriptionStatsUpdate {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableCost(v *float64) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *TranscriptionStatsUpdate) AddCost(v float64) *TranscriptionStatsUpdate {
	_u.mutation.AddCost(v)
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TranscriptionStatsUpdate) SetOwnerID(v string) *TranscriptionStatsUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableOwnerID(v *string) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetTranslationID sets the "translation_id" field.
func (_u *TranscriptionStatsUpdate) SetTranslationID(v int) *TranscriptionStatsUpdate {
	_u.mutation.SetTranslationID(v)
	return _u
}

// SetNillableTranslationID sets the "translation_id" field if the given value is not nil.
func (_u *TranscriptionStatsUpdate) SetNillableTranslationID(v *int) *TranscriptionStatsUpdate {
	if v != nil {
		_u.SetTranslationID(*v)
	}
	return _u
}

// SetTranslation sets the "translation" edge to the Translation entity.
func (_u *TranscriptionStatsUpdate) SetTranslation(v *Translation) *TranscriptionStatsUpdate {
	return _u.SetTranslationID(v.ID)
}

// Mutation returns the TranscriptionStatsMutation object of the builder.
func (_u *TranscriptionStatsUpdate) Mutation() *TranscriptionStatsMutation {
	return _u.mutation
}

// ClearTranslation clears the "translation" edge to the Translation entity.
func (_u *TranscriptionStatsUpdate) ClearTranslation() *TranscriptionStatsUpdate {
	_u.mutation.ClearTranslation()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TranscriptionStatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TranscriptionStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TranscriptionStatsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TranscriptionStatsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TranscriptionStatsUpdate) check() error {
	if v, ok := _u.mutation.ModelName(); ok {
		if err := transcriptionstats.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`ent: validator failed for field "TranscriptionStats.model_name": %w`, err)}
		}
	}
	if _u.mutation.TranslationCleared() && len(_u.mutation.TranslationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TranscriptionStats.translation"`)
	}
	return nil
}

func (_u *TranscriptionStatsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transcriptionstats.Table, transcriptionstats.Columns, sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(transcriptionstats.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(transcriptionstats.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.InputToken(); ok {
		_spec.SetField(transcriptionstats.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInputToken(); ok {
		_spec.AddField(transcriptionstats.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OutputToken(); ok {
		_spec.SetField(transcriptionstats.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOutputToken(); ok {
		_spec.AddField(transcriptionstats.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(transcriptionstats.FieldModelName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(transcriptionstats.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(transcriptionstats.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(transcriptionstats.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.TranslationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcriptionstats.TranslationTable,
			Columns: []string{transcriptionstats.TranslationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TranslationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcriptionstats.TranslationTable,
			Columns: []string{transcriptionstats.TranslationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcriptionstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TranscriptionStatsUpdateOne is the builder for updating a single TranscriptionStats entity.
type TranscriptionStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranscriptionStatsMutation
}

// SetDuration sets the "duration" field.
func (_u *TranscriptionStatsUpdateOne) SetDuration(v int64) *TranscriptionStatsUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableDuration(v *int64) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *TranscriptionStatsUpdateOne) AddDuration(v int64) *TranscriptionStatsUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// SetInputToken sets the "input_token" field.
func (_u *TranscriptionStatsUpdateOne) SetInputToken(v int) *TranscriptionStatsUpdateOne {
	_u.mutation.ResetInputToken()
	_u.mutation.SetInputToken(v)
	return _u
}

// SetNillableInputToken sets the "input_token" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableInputToken(v *int) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetInputToken(*v)
	}
	return _u
}

// AddInputToken adds value to the "input_token" field.
func (_u *TranscriptionStatsUpdateOne) AddInputToken(v int) *TranscriptionStatsUpdateOne {
	_u.mutation.AddInputToken(v)
	return _u
}

// SetOutputToken sets the "output_token" field.
func (_u *TranscriptionStatsUpdateOne) SetOutputToken(v int) *TranscriptionStatsUpdateOne {
	_u.mutation.ResetOutputToken()
	_u.mutation.SetOutputToken(v)
	return _u
}

// SetNillableOutputToken sets the "output_token" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableOutputToken(v *int) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetOutputToken(*v)
	}
	return _u
}

// AddOutputToken adds value to the "output_token" field.
func (_u *TranscriptionStatsUpdateOne) AddOutputToken(v int) *TranscriptionStatsUpdateOne {
	_u.mutation.AddOutputToken(v)
	return _u
}

// SetModelName sets the "model_name" field.
func (_u *TranscriptionStatsUpdateOne) SetModelName(v string) *TranscriptionStatsUpdateOne {
	_u.mutation.SetModelName(v)
	return _u
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableModelName(v *string) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetModelName(*v)
	}
	return _u
}

// SetCost sets the "cost" field.
func (_u *TranscriptionStatsUpdateOne) SetCost(v float64) *TranscriptionStatsUpdateOne {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableCost(v *float64) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *TranscriptionStatsUpdateOne) AddCost(v float64) *TranscriptionStatsUpdateOne {
	_u.mutation.AddCost(v)
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TranscriptionStatsUpdateOne) SetOwnerID(v string) *TranscriptionStatsUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableOwnerID(v *string) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetTranslationID sets the "translation_id" field.
func (_u *TranscriptionStatsUpdateOne) SetTranslationID(v int) *TranscriptionStatsUpdateOne {
	_u.mutation.SetTranslationID(v)
	return _u
}

// SetNillableTranslationID sets the "translation_id" field if the given value is not nil.
func (_u *TranscriptionStatsUpdateOne) SetNillableTranslationID(v *int) *TranscriptionStatsUpdateOne {
	if v != nil {
		_u.SetTranslationID(*v)
	}
	return _u
}

// SetTranslation sets the "translation" edge to the Translation entity.
func (_u *TranscriptionStatsUpdateOne) SetTranslation(v *Translation) *TranscriptionStatsUpdateOne {
	return _u.SetTranslationID(v.ID)
}

// Mutation returns the TranscriptionStatsMutation object of the builder.
func (_u *TranscriptionStatsUpdateOne) Mutation() *TranscriptionStatsMutation {
	return _u.mutation
}

// ClearTranslation clears the "translation" edge to the Translation entity.
func (_u *TranscriptionStatsUpdateOne) ClearTranslation() *TranscriptionStatsUpdateOne {
	_u.mutation.ClearTranslation()
	return _u
}

// Where appends a list predicates to the TranscriptionStatsUpdate builder.
func (_u *TranscriptionStatsUpdateOne) Where(ps ...predicate.TranscriptionStats) *TranscriptionStatsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TranscriptionStatsUpdateOne) Select(field string, fields ...string) *TranscriptionStatsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TranscriptionStats entity.
func (_u *TranscriptionStatsUpdateOne) Save(ctx context.Context) (*TranscriptionStats, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TranscriptionStatsUpdateOne) SaveX(ctx context.Context) *TranscriptionStats {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TranscriptionStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TranscriptionStatsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TranscriptionStatsUpdateOne) check() error {
	if v, ok := _u.mutation.ModelName(); ok {
		if err := transcriptionstats.ModelNameValidator(v); err != nil {
			return &ValidationError{Name: "model_name", err: fmt.Errorf(`ent: validator failed for field "TranscriptionStats.model_name": %w`, err)}
		}
	}
	if _u.mutation.TranslationCleared() && len(_u.mutation.TranslationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TranscriptionStats.translation"`)
	}
	return nil
}

func (_u *TranscriptionStatsUpdateOne) sqlSave(ctx context.Context) (_node *TranscriptionStats, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transcriptionstats.Table, transcriptionstats.Columns, sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TranscriptionStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transcriptionstats.FieldID)
		for _, f := range fields {
			if !transcriptionstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transcriptionstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(transcriptionstats.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(transcriptionstats.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.InputToken(); ok {
		_spec.SetField(transcriptionstats.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedInputToken(); ok {
		_spec.AddField(transcriptionstats.FieldInputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OutputToken(); ok {
		_spec.SetField(transcriptionstats.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOutputToken(); ok {
		_spec.AddField(transcriptionstats.FieldOutputToken, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ModelName(); ok {
		_spec.SetField(transcriptionstats.FieldModelName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(transcriptionstats.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(transcriptionstats.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(transcriptionstats.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.TranslationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcriptionstats.TranslationTable,
			Columns: []string{transcriptionstats.TranslationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TranslationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcriptionstats.TranslationTable,
			Columns: []string{transcriptionstats.TranslationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TranscriptionStats{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcriptionstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
