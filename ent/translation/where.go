// Code generated by ent, DO NOT EDIT.

package translation

import (
	"ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldID, id))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldContent, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldExternalID, v))
}

// LanguagePair applies equality check predicate on the "language_pair" field. It's identical to LanguagePairEQ.
func LanguagePair(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldLanguagePair, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldOwnerID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldContent, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldExternalID, v))
}

// LanguagePairEQ applies the EQ predicate on the "language_pair" field.
func LanguagePairEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldLanguagePair, v))
}

// LanguagePairNEQ applies the NEQ predicate on the "language_pair" field.
func LanguagePairNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldLanguagePair, v))
}

// LanguagePairIn applies the In predicate on the "language_pair" field.
func LanguagePairIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldLanguagePair, vs...))
}

// LanguagePairNotIn applies the NotIn predicate on the "language_pair" field.
func LanguagePairNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldLanguagePair, vs...))
}

// LanguagePairGT applies the GT predicate on the "language_pair" field.
func LanguagePairGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldLanguagePair, v))
}

// LanguagePairGTE applies the GTE predicate on the "language_pair" field.
func LanguagePairGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldLanguagePair, v))
}

// LanguagePairLT applies the LT predicate on the "language_pair" field.
func LanguagePairLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldLanguagePair, v))
}

// LanguagePairLTE applies the LTE predicate on the "language_pair" field.
func LanguagePairLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldLanguagePair, v))
}

// LanguagePairContains applies the Contains predicate on the "language_pair" field.
func LanguagePairContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldLanguagePair, v))
}

// LanguagePairHasPrefix applies the HasPrefix predicate on the "language_pair" field.
func LanguagePairHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldLanguagePair, v))
}

// LanguagePairHasSuffix applies the HasSuffix predicate on the "language_pair" field.
func LanguagePairHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldLanguagePair, v))
}

// LanguagePairEqualFold applies the EqualFold predicate on the "language_pair" field.
func LanguagePairEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldLanguagePair, v))
}

// LanguagePairContainsFold applies the ContainsFold predicate on the "language_pair" field.
func LanguagePairContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldLanguagePair, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldOwnerID, v))
}

// HasTranscriptionStats applies the HasEdge predicate on the "transcription_stats" edge.
func HasTranscriptionStats() predicate.Translation {
	return predicate.Translation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranscriptionStatsTable, TranscriptionStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranscriptionStatsWith applies the HasEdge predicate on the "transcription_stats" edge with a given conditions (other predicates).
func HasTranscriptionStatsWith(preds ...predicate.TranscriptionStats) predicate.Translation {
	return predicate.Translation(func(s *sql.Selector) {
		step := newTranscriptionStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.NotPredicates(p))
}
