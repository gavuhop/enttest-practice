// Code generated by ent, DO NOT EDIT.

package translation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the translation type in the database.
	Label = "translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldChoices holds the string denoting the choices field in the database.
	FieldChoices = "choices"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldLanguagePair holds the string denoting the language_pair field in the database.
	FieldLanguagePair = "language_pair"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// EdgeTranscriptionStats holds the string denoting the transcription_stats edge name in mutations.
	EdgeTranscriptionStats = "transcription_stats"
	// Table holds the table name of the translation in the database.
	Table = "translations"
	// TranscriptionStatsTable is the table that holds the transcription_stats relation/edge.
	TranscriptionStatsTable = "transcription_stats"
	// TranscriptionStatsInverseTable is the table name for the TranscriptionStats entity.
	// It exists in this package in order to avoid circular dependency with the "transcriptionstats" package.
	TranscriptionStatsInverseTable = "transcription_stats"
	// TranscriptionStatsColumn is the table column denoting the transcription_stats relation/edge.
	TranscriptionStatsColumn = "translation_id"
)

// Columns holds all SQL columns for translation fields.
var Columns = []string{
	FieldID,
	FieldContent,
	FieldChoices,
	FieldExternalID,
	FieldLanguagePair,
	FieldOwnerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Translation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByLanguagePair orders the results by the language_pair field.
func ByLanguagePair(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguagePair, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByTranscriptionStatsCount orders the results by transcription_stats count.
func ByTranscriptionStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranscriptionStatsStep(), opts...)
	}
}

// ByTranscriptionStats orders the results by transcription_stats terms.
func ByTranscriptionStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranscriptionStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTranscriptionStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranscriptionStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranscriptionStatsTable, TranscriptionStatsColumn),
	)
}
