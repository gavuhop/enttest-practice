// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent/ent/predicate"
	"ent/ent/transcriptionstats"
	"ent/ent/translation"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TranslationUpdate is the builder for updating Translation entities.
type TranslationUpdate struct {
	config
	hooks    []Hook
	mutation *TranslationMutation
}

// Where appends a list predicates to the TranslationUpdate builder.
func (_u *TranslationUpdate) Where(ps ...predicate.Translation) *TranslationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetContent sets the "content" field.
func (_u *TranslationUpdate) SetContent(v string) *TranslationUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *TranslationUpdate) SetNillableContent(v *string) *TranslationUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetChoices sets the "choices" field.
func (_u *TranslationUpdate) SetChoices(v []map[string]interface{}) *TranslationUpdate {
	_u.mutation.SetChoices(v)
	return _u
}

// AppendChoices appends value to the "choices" field.
func (_u *TranslationUpdate) AppendChoices(v []map[string]interface{}) *TranslationUpdate {
	_u.mutation.AppendChoices(v)
	return _u
}

// SetExternalID sets the "external_id" field.
func (_u *TranslationUpdate) SetExternalID(v string) *TranslationUpdate {
	_u.mutation.SetExternalID(v)
	return _u
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (_u *TranslationUpdate) SetNillableExternalID(v *string) *TranslationUpdate {
	if v != nil {
		_u.SetExternalID(*v)
	}
	return _u
}

// SetLanguagePair sets the "language_pair" field.
func (_u *TranslationUpdate) SetLanguagePair(v string) *TranslationUpdate {
	_u.mutation.SetLanguagePair(v)
	return _u
}

// SetNillableLanguagePair sets the "language_pair" field if the given value is not nil.
func (_u *TranslationUpdate) SetNillableLanguagePair(v *string) *TranslationUpdate {
	if v != nil {
		_u.SetLanguagePair(*v)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TranslationUpdate) SetOwnerID(v string) *TranslationUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TranslationUpdate) SetNillableOwnerID(v *string) *TranslationUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// AddTranscriptionStatIDs adds the "transcription_stats" edge to the TranscriptionStats entity by IDs.
func (_u *TranslationUpdate) AddTranscriptionStatIDs(ids ...int) *TranslationUpdate {
	_u.mutation.AddTranscriptionStatIDs(ids...)
	return _u
}

// AddTranscriptionStats adds the "transcription_stats" edges to the TranscriptionStats entity.
func (_u *TranslationUpdate) AddTranscriptionStats(v ...*TranscriptionStats) *TranslationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTranscriptionStatIDs(ids...)
}

// Mutation returns the TranslationMutation object of the builder.
func (_u *TranslationUpdate) Mutation() *TranslationMutation {
	return _u.mutation
}

// ClearTranscriptionStats clears all "transcription_stats" edges to the TranscriptionStats entity.
func (_u *TranslationUpdate) ClearTranscriptionStats() *TranslationUpdate {
	_u.mutation.ClearTranscriptionStats()
	return _u
}

// RemoveTranscriptionStatIDs removes the "transcription_stats" edge to TranscriptionStats entities by IDs.
func (_u *TranslationUpdate) RemoveTranscriptionStatIDs(ids ...int) *TranslationUpdate {
	_u.mutation.RemoveTranscriptionStatIDs(ids...)
	return _u
}

// RemoveTranscriptionStats removes "transcription_stats" edges to TranscriptionStats entities.
func (_u *TranslationUpdate) RemoveTranscriptionStats(v ...*TranscriptionStats) *TranslationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTranscriptionStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TranslationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TranslationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TranslationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(translation.Table, translation.Columns, sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(translation.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Choices(); ok {
		_spec.SetField(translation.FieldChoices, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedChoices(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, translation.FieldChoices, value)
		})
	}
	if value, ok := _u.mutation.ExternalID(); ok {
		_spec.SetField(translation.FieldExternalID, field.TypeString, value)
	}
	if value, ok := _u.mutation.LanguagePair(); ok {
		_spec.SetField(translation.FieldLanguagePair, field.TypeString, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(translation.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.TranscriptionStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTranscriptionStatsIDs(); len(nodes) > 0 && !_u.mutation.TranscriptionStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TranscriptionStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TranslationUpdateOne is the builder for updating a single Translation entity.
type TranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranslationMutation
}

// SetContent sets the "content" field.
func (_u *TranslationUpdateOne) SetContent(v string) *TranslationUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *TranslationUpdateOne) SetNillableContent(v *string) *TranslationUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetChoices sets the "choices" field.
func (_u *TranslationUpdateOne) SetChoices(v []map[string]interface{}) *TranslationUpdateOne {
	_u.mutation.SetChoices(v)
	return _u
}

// AppendChoices appends value to the "choices" field.
func (_u *TranslationUpdateOne) AppendChoices(v []map[string]interface{}) *TranslationUpdateOne {
	_u.mutation.AppendChoices(v)
	return _u
}

// SetExternalID sets the "external_id" field.
func (_u *TranslationUpdateOne) SetExternalID(v string) *TranslationUpdateOne {
	_u.mutation.SetExternalID(v)
	return _u
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (_u *TranslationUpdateOne) SetNillableExternalID(v *string) *TranslationUpdateOne {
	if v != nil {
		_u.SetExternalID(*v)
	}
	return _u
}

// SetLanguagePair sets the "language_pair" field.
func (_u *TranslationUpdateOne) SetLanguagePair(v string) *TranslationUpdateOne {
	_u.mutation.SetLanguagePair(v)
	return _u
}

// SetNillableLanguagePair sets the "language_pair" field if the given value is not nil.
func (_u *TranslationUpdateOne) SetNillableLanguagePair(v *string) *TranslationUpdateOne {
	if v != nil {
		_u.SetLanguagePair(*v)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TranslationUpdateOne) SetOwnerID(v string) *TranslationUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TranslationUpdateOne) SetNillableOwnerID(v *string) *TranslationUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// AddTranscriptionStatIDs adds the "transcription_stats" edge to the TranscriptionStats entity by IDs.
func (_u *TranslationUpdateOne) AddTranscriptionStatIDs(ids ...int) *TranslationUpdateOne {
	_u.mutation.AddTranscriptionStatIDs(ids...)
	return _u
}

// AddTranscriptionStats adds the "transcription_stats" edges to the TranscriptionStats entity.
func (_u *TranslationUpdateOne) AddTranscriptionStats(v ...*TranscriptionStats) *TranslationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTranscriptionStatIDs(ids...)
}

// Mutation returns the TranslationMutation object of the builder.
func (_u *TranslationUpdateOne) Mutation() *TranslationMutation {
	return _u.mutation
}

// ClearTranscriptionStats clears all "transcription_stats" edges to the TranscriptionStats entity.
func (_u *TranslationUpdateOne) ClearTranscriptionStats() *TranslationUpdateOne {
	_u.mutation.ClearTranscriptionStats()
	return _u
}

// RemoveTranscriptionStatIDs removes the "transcription_stats" edge to TranscriptionStats entities by IDs.
func (_u *TranslationUpdateOne) RemoveTranscriptionStatIDs(ids ...int) *TranslationUpdateOne {
	_u.mutation.RemoveTranscriptionStatIDs(ids...)
	return _u
}

// RemoveTranscriptionStats removes "transcription_stats" edges to TranscriptionStats entities.
func (_u *TranslationUpdateOne) RemoveTranscriptionStats(v ...*TranscriptionStats) *TranslationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTranscriptionStatIDs(ids...)
}

// Where appends a list predicates to the TranslationUpdate builder.
func (_u *TranslationUpdateOne) Where(ps ...predicate.Translation) *TranslationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TranslationUpdateOne) Select(field string, fields ...string) *TranslationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Translation entity.
func (_u *TranslationUpdateOne) Save(ctx context.Context) (*Translation, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TranslationUpdateOne) SaveX(ctx context.Context) *Translation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TranslationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TranslationUpdateOne) sqlSave(ctx context.Context) (_node *Translation, err error) {
	_spec := sqlgraph.NewUpdateSpec(translation.Table, translation.Columns, sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Translation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, translation.FieldID)
		for _, f := range fields {
			if !translation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != translation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(translation.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Choices(); ok {
		_spec.SetField(translation.FieldChoices, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedChoices(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, translation.FieldChoices, value)
		})
	}
	if value, ok := _u.mutation.ExternalID(); ok {
		_spec.SetField(translation.FieldExternalID, field.TypeString, value)
	}
	if value, ok := _u.mutation.LanguagePair(); ok {
		_spec.SetField(translation.FieldLanguagePair, field.TypeString, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(translation.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.TranscriptionStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTranscriptionStatsIDs(); len(nodes) > 0 && !_u.mutation.TranscriptionStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TranscriptionStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   translation.TranscriptionStatsTable,
			Columns: []string{translation.TranscriptionStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transcriptionstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Translation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
