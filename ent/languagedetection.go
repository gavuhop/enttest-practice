// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"ent/ent/languagedetection"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LanguageDetection is the model entity for the LanguageDetection schema.
type LanguageDetection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// DetectedLanguages holds the value of the "detected_languages" field.
	DetectedLanguages map[string]interface{} `json:"detected_languages,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int64 `json:"duration,omitempty"`
	// ModelName holds the value of the "model_name" field.
	ModelName string `json:"model_name,omitempty"`
	// InputToken holds the value of the "input_token" field.
	InputToken int `json:"input_token,omitempty"`
	// OutputToken holds the value of the "output_token" field.
	OutputToken int `json:"output_token,omitempty"`
	// CachedToken holds the value of the "cached_token" field.
	CachedToken int `json:"cached_token,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost         float64 `json:"cost,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LanguageDetection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case languagedetection.FieldDetectedLanguages:
			values[i] = new([]byte)
		case languagedetection.FieldCost:
			values[i] = new(sql.NullFloat64)
		case languagedetection.FieldID, languagedetection.FieldDuration, languagedetection.FieldInputToken, languagedetection.FieldOutputToken, languagedetection.FieldCachedToken:
			values[i] = new(sql.NullInt64)
		case languagedetection.FieldQuery, languagedetection.FieldModelName, languagedetection.FieldOwnerID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LanguageDetection fields.
func (_m *LanguageDetection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case languagedetection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case languagedetection.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				_m.Query = value.String
			}
		case languagedetection.FieldDetectedLanguages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field detected_languages", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.DetectedLanguages); err != nil {
					return fmt.Errorf("unmarshal field detected_languages: %w", err)
				}
			}
		case languagedetection.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = value.Int64
			}
		case languagedetection.FieldModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_name", values[i])
			} else if value.Valid {
				_m.ModelName = value.String
			}
		case languagedetection.FieldInputToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_token", values[i])
			} else if value.Valid {
				_m.InputToken = int(value.Int64)
			}
		case languagedetection.FieldOutputToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_token", values[i])
			} else if value.Valid {
				_m.OutputToken = int(value.Int64)
			}
		case languagedetection.FieldCachedToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cached_token", values[i])
			} else if value.Valid {
				_m.CachedToken = int(value.Int64)
			}
		case languagedetection.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case languagedetection.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				_m.Cost = value.Float64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LanguageDetection.
// This includes values selected through modifiers, order, etc.
func (_m *LanguageDetection) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this LanguageDetection.
// Note that you need to call LanguageDetection.Unwrap() before calling this method if this LanguageDetection
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *LanguageDetection) Update() *LanguageDetectionUpdateOne {
	return NewLanguageDetectionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the LanguageDetection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *LanguageDetection) Unwrap() *LanguageDetection {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: LanguageDetection is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *LanguageDetection) String() string {
	var builder strings.Builder
	builder.WriteString("LanguageDetection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("query=")
	builder.WriteString(_m.Query)
	builder.WriteString(", ")
	builder.WriteString("detected_languages=")
	builder.WriteString(fmt.Sprintf("%v", _m.DetectedLanguages))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Duration))
	builder.WriteString(", ")
	builder.WriteString("model_name=")
	builder.WriteString(_m.ModelName)
	builder.WriteString(", ")
	builder.WriteString("input_token=")
	builder.WriteString(fmt.Sprintf("%v", _m.InputToken))
	builder.WriteString(", ")
	builder.WriteString("output_token=")
	builder.WriteString(fmt.Sprintf("%v", _m.OutputToken))
	builder.WriteString(", ")
	builder.WriteString("cached_token=")
	builder.WriteString(fmt.Sprintf("%v", _m.CachedToken))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.Cost))
	builder.WriteByte(')')
	return builder.String()
}

// LanguageDetections is a parsable slice of LanguageDetection.
type LanguageDetections []*LanguageDetection
