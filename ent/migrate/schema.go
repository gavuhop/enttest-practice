// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// LanguageDetectionsColumns holds the columns for the "language_detections" table.
	LanguageDetectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "query", Type: field.TypeString},
		{Name: "detected_languages", Type: field.TypeJSON},
		{Name: "duration", Type: field.TypeInt64},
		{Name: "model_name", Type: field.TypeString, Size: 50},
		{Name: "input_token", Type: field.TypeInt},
		{Name: "output_token", Type: field.TypeInt},
		{Name: "cached_token", Type: field.TypeInt},
		{Name: "owner_id", Type: field.TypeString},
		{Name: "cost", Type: field.TypeFloat64},
	}
	// LanguageDetectionsTable holds the schema information for the "language_detections" table.
	LanguageDetectionsTable = &schema.Table{
		Name:       "language_detections",
		Columns:    LanguageDetectionsColumns,
		PrimaryKey: []*schema.Column{LanguageDetectionsColumns[0]},
	}
	// TranscriptionStatsColumns holds the columns for the "transcription_stats" table.
	TranscriptionStatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "duration", Type: field.TypeInt64},
		{Name: "input_token", Type: field.TypeInt},
		{Name: "output_token", Type: field.TypeInt},
		{Name: "model_name", Type: field.TypeString, Size: 50},
		{Name: "cost", Type: field.TypeFloat64},
		{Name: "owner_id", Type: field.TypeString},
		{Name: "translation_id", Type: field.TypeInt},
	}
	// TranscriptionStatsTable holds the schema information for the "transcription_stats" table.
	TranscriptionStatsTable = &schema.Table{
		Name:       "transcription_stats",
		Columns:    TranscriptionStatsColumns,
		PrimaryKey: []*schema.Column{TranscriptionStatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transcription_stats_translations_transcription_stats",
				Columns:    []*schema.Column{TranscriptionStatsColumns[7]},
				RefColumns: []*schema.Column{TranslationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TranslationsColumns holds the columns for the "translations" table.
	TranslationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "choices", Type: field.TypeJSON},
		{Name: "external_id", Type: field.TypeString, Unique: true},
		{Name: "language_pair", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString},
	}
	// TranslationsTable holds the schema information for the "translations" table.
	TranslationsTable = &schema.Table{
		Name:       "translations",
		Columns:    TranslationsColumns,
		PrimaryKey: []*schema.Column{TranslationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "full_name", Type: field.TypeString, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role", Type: field.TypeString, Nullable: true, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		LanguageDetectionsTable,
		TranscriptionStatsTable,
		TranslationsTable,
		UsersTable,
	}
)

func init() {
	TranscriptionStatsTable.ForeignKeys[0].RefTable = TranslationsTable
}
